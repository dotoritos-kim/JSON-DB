name: Build & Auto Version Tagging & Publish

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 태깅을 위해 전체 히스토리 가져오기

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Get latest tag
        id: get_latest_tag
        run: echo "LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")" >> $GITHUB_ENV

      - name: Determine next version
        id: versioning
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tag found, starting from v0.0.1"
            NEW_VERSION="v0.0.1"
          else
            echo "Latest tag: $LATEST_TAG"

            # Extract major, minor, patch from latest tag
            VERSION=${LATEST_TAG#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            # Get commit messages since last tag
            CHANGES=$(git log $LATEST_TAG..HEAD --pretty=format:"%s" || echo "")

            # Determine version bump type
            if echo "$CHANGES" | grep -iqE 'BREAKING CHANGE|major:'; then
              ((MAJOR++))
              MINOR=0
              PATCH=0
            elif echo "$CHANGES" | grep -iqE 'feat:'; then
              ((MINOR++))
              PATCH=0
            else
              ((PATCH++))
            fi

            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Next version: $NEW_VERSION"


      - name: Setup Git authentication
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Create Git tag
        run: |
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}
      - name: Create GitHub Release
        run: |
          gh release create ${{ env.NEW_VERSION }} \
            --title "Release ${{ env.NEW_VERSION }}" \
            --notes "자동 생성된 릴리즈입니다." \
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
